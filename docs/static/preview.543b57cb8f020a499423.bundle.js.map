{"version":3,"file":"static/preview.543b57cb8f020a499423.bundle.js","sources":["webpack:///./src/stories/DropdownMulti.tsx","webpack:///./src/components/DropdownMulti.style.ts","webpack:///./src/components/DropdownMulti.tsx","webpack:///./src/components/Dropdown.style.ts","webpack:///./src/styles/theme.ts","webpack:///./src/stories/style.ts","webpack:///./assets/fonts/d2coding-ligature.woff2"],"sourcesContent":["import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs, text, boolean } from '@storybook/addon-knobs/react';\nimport { withState } from '@dump247/storybook-state';\nimport DropdownMulti from '../components/DropdownMulti';\nimport Documentation from './Documentation';\nconst DropdownProps = `\\\n  type Option = object\n\n  interface Props {\n    options: Option[]\n    value: Option | null\n    onChange: (option: Option) => void\n\n    valueKey?: string\n    labelKey?: string\n    valueRenderer?: (selectedOption: Option, labelKey: string) => ReactNode\n    optionRenderer?: (option: Option, labelKey: string) => ReactNode\n    filterOptions?: (options: Option[], inputValue: string, labelKey: string) => Option[]\n    disableOption?: (option: Option) => boolean\n    label?: string\n    noValidOptionMessage?: string\n\n    onFocus: (e: FocusEvent) => void\n    onBlur: (e: FocusEvent) => void\n\n    disabled?: boolean\n    clearable?: boolean\n    searchable?: boolean\n    autoFocus?: boolean\n  }\n`;\nconst defaultUsage = `\\\n  const Options = [\n    { label: 'Option 0', value: 0 },\n    { label: 'Option 1', value: 1 },\n    { label: 'Option 2', value: 2 },\n    { label: 'Option 3', value: 3 },\n    { label: 'Option 4', value: 4 },\n  ]\n\n  <Dropdown\n    options={Options}\n    value={this.state.value}\n    onChange={this.onChange}\n    label=\"DropdownMulti\"\n  />\n`;\nconst customRendererUsage = `\\\n  const Options = [\n    { label: 'Option 0', value: 0 },\n    { label: 'Option 1', value: 1 },\n    { label: 'Option 2', value: 2 },\n    { label: 'Option 3', value: 3 },\n    { label: 'Option 4', value: 4 },\n  ]\n\n  const exampleOptionRenderer = (option, labelKey) => {\n    if (!option) {\n      return null\n    }\n    const kanjiEmoji = ['🐭', '🐮', '🐯', '🐰', '🐲']\n    return <span>{kanjiEmoji[option.value]} {option[labelKey]}</span>\n  }\n\n  const exampleValueRenderer = (option, valueKey) => {\n    if (!option) {\n      return null\n    }\n    const kanjiEmoji = ['🐭', '🐮', '🐯', '🐰', '🐲']\n    return <span>{kanjiEmoji[option.value]}</span>\n  }\n\n  <Dropdown\n    options={Options}\n    value={this.state.value}\n    onChange={this.onChange}\n    label=\"DropdownMulti\"\n    optionRenderer={exampleOptionRenderer}\n    valueRenderer={exampleValueRenderer}\n  />\n`;\nconst disableOptionUsage = `\\\n  const Options = [\n    { label: 'Option 0', value: 0 },\n    { label: 'Option 1', value: 1 },\n    { label: 'Option 2', value: 2 },\n    { label: 'Option 3', value: 3 },\n    { label: 'Option 4', value: 4 },\n  ]\n\n  const disableOddOption = option => {\n    return option.value % 2 === 1\n  }\n\n  <Dropdown\n    options={Options}\n    value={this.state.value}\n    onChange={this.onChange}\n    label=\"DropdownMulti\"\n    disableOption={disableOddOption}\n  />\n`;\nconst noValidOptionUsage = `\\\n  const Options = []\n\n  <Dropdown\n    options={Options}\n    value={this.state.value}\n    onChange={this.onChange}\n    label=\"DropdownMulti\"\n    noValidOptionMessage=\"use custom message\"\n  />\n`;\nconst Options = [\n    { label: 'Option 0', value: 0 },\n    { label: 'Option 1', value: 1 },\n    { label: 'Option 2', value: 2 },\n    { label: 'Option 3', value: 3 },\n    { label: 'Option 4', value: 4 },\n];\nconst exampleOptionRenderer = (option, labelKey) => {\n    if (!option) {\n        return null;\n    }\n    const kanjiEmoji = ['🐭', '🐮', '🐯', '🐰', '🐲'];\n    return (React.createElement(\"span\", null,\n        kanjiEmoji[option.value],\n        \" \",\n        option[labelKey]));\n};\nconst exampleValueRenderer = option => {\n    if (!option) {\n        return null;\n    }\n    const kanjiEmoji = ['🐭', '🐮', '🐯', '🐰', '🐲'];\n    return React.createElement(\"span\", null, kanjiEmoji[option.value]);\n};\nconst disableOddOption = option => {\n    return option.value % 2 === 1;\n};\nconst emptyValue = [];\nstoriesOf('DropdownMulti', module)\n    .addDecorator(withKnobs)\n    .add('default', withState({ value: emptyValue }, store => (React.createElement(Documentation, { name: \"DropdownMulti\", description: \"react-select\\uC758 \\uAC04\\uB7B5\\uD654\\uB41C \\uCEF4\\uD3EC\\uB10C\\uD2B8.\", usage: defaultUsage, tsInterface: DropdownProps },\n    React.createElement(DropdownMulti, { options: Options, value: store.state.value, onChange: value => {\n            store.set({ value });\n            action('onChange')(value);\n        }, label: text('label', 'Dropdown'), disabled: boolean('disabled', false), clearable: boolean('clearable', true), searchable: boolean('searchable', true) })))))\n    .add('custom option/value renderer', withState({ value: [Options[2]] }, store => (React.createElement(Documentation, { name: \"DropdownMulti\", description: \"react-select\\uC758 \\uAC04\\uB7B5\\uD654\\uB41C \\uCEF4\\uD3EC\\uB10C\\uD2B8.\", usage: customRendererUsage, tsInterface: DropdownProps },\n    React.createElement(DropdownMulti, { options: Options, value: store.state.value, onChange: value => {\n            store.set({ value });\n            action('onChange')(value);\n        }, label: text('label', 'Dropdown'), disabled: boolean('disabled', false), clearable: boolean('clearable', true), searchable: boolean('searchable', true), optionRenderer: exampleOptionRenderer, valueRenderer: exampleValueRenderer })))))\n    .add('disable some options', withState({ value: emptyValue }, store => (React.createElement(Documentation, { name: \"DropdownMulti\", description: \"react-select\\uC758 \\uAC04\\uB7B5\\uD654\\uB41C \\uCEF4\\uD3EC\\uB10C\\uD2B8.\", usage: disableOptionUsage, tsInterface: DropdownProps },\n    React.createElement(DropdownMulti, { options: Options, value: store.state.value, onChange: value => {\n            store.set({ value });\n            action('onChange')(value);\n        }, label: text('label', 'Dropdown'), disabled: boolean('disabled', false), clearable: boolean('clearable', true), searchable: boolean('searchable', true), disableOption: disableOddOption })))))\n    .add('no options available', withState({ value: emptyValue }, store => (React.createElement(Documentation, { name: \"DropdownMulti\", description: \"react-select\\uC758 \\uAC04\\uB7B5\\uD654\\uB41C \\uCEF4\\uD3EC\\uB10C\\uD2B8.\", usage: noValidOptionUsage, tsInterface: DropdownProps },\n    React.createElement(DropdownMulti, { options: [], value: store.state.value, onChange: value => {\n            store.set({ value });\n            action('onChange')(value);\n        }, label: text('label', 'Dropdown'), disabled: boolean('disabled', false), clearable: boolean('clearable', true), searchable: boolean('searchable', true), noValidOptionMessage: text('noValidOptionMessage', 'use custom message') })))));\n","import styled from 'styled-components';\nexport { StyledDropdown, DropdownControl, Label, Input, ToggleArrow, ClearButton, ErrorMessage, Menu, Option, } from './Dropdown.style';\nexport const Values = styled.div `\n  display: inline-block;\n  line-height: 30px;\n`;\nexport const Value = styled.div `\n  display: inline-block;\n  padding: 2px 5px;\n  font-size: 12px;\n  line-height: 18px;\n  background: rgba(255, 255, 255, 0.4);\n  border: 1px solid #eee;\n  border-radius: 3px;\n  margin: 2px;\n  & .remove-value {\n    margin-left: 3px;\n    cursor: pointer;\n  }\n`;\n","import React, { PureComponent, } from 'react';\nimport ReactDOM from 'react-dom';\nimport cx from 'classnames';\nimport If from './If';\nimport withDefaultProps from '../utils/withDefaultProps';\nimport { StyledDropdown, DropdownControl, Label, Value, Input, ToggleArrow, ClearButton, ErrorMessage, Menu, Option, Values, } from './DropdownMulti.style';\nfunction mod(n, m) {\n    if (n === 0) {\n        return 0;\n    }\n    return (m % n + n) % n;\n}\nconst defaultOptionRenderer = (option, labelKey) => (React.createElement(\"span\", null, option && option[labelKey]));\nconst defaultFilterOptions = (givenOptions, currentSelected, inputValue, labelKey) => {\n    let options = givenOptions.filter(o => !currentSelected.includes(o));\n    if (inputValue) {\n        options = options.filter(o => (o[labelKey] || '').indexOf(inputValue) >= 0);\n    }\n    return options;\n};\nclass Dropdown extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            inputFocused: this.props.autoFocus || false,\n            inputValue: '',\n            focusedOption: this.props.value,\n            menuOpened: false,\n        };\n        // data cache\n        this.filteredOptions = [];\n        this.onInputChange = (e) => {\n            const inputValue = e.target.value;\n            this.setState(prevState => (Object.assign({}, prevState, { inputValue, menuOpened: true })));\n        };\n        this.onInputFocus = e => {\n            this.setState(prevState => (Object.assign({}, prevState, { inputFocused: true, menuOpened: true })));\n            this.props.onFocus(e);\n        };\n        this.onInputBlur = e => {\n            this.setState(prevState => (Object.assign({}, prevState, { inputFocused: false })));\n            this.props.onBlur(e);\n        };\n        this.onKeyDown = (e) => {\n            switch (e.keyCode) {\n                case 9: {\n                    // tab\n                    if (e.shiftKey || !this.state.menuOpened) {\n                        return;\n                    }\n                    this.selectFocusedOption();\n                    this.closeMenu();\n                    break;\n                }\n                case 13: {\n                    // enter\n                    if (!this.state.menuOpened) {\n                        return;\n                    }\n                    e.stopPropagation();\n                    this.selectFocusedOption();\n                    break;\n                }\n                case 27: {\n                    // escape\n                    if (this.state.menuOpened) {\n                        this.closeMenu();\n                        e.stopPropagation();\n                    }\n                    break;\n                }\n                case 38: {\n                    // up\n                    const prevOption = this.lookupPreviousOption();\n                    this.focusOption(prevOption)();\n                    break;\n                }\n                case 40: {\n                    // down\n                    const nextOption = this.lookupNextOption();\n                    this.focusOption(nextOption)();\n                    break;\n                }\n            }\n        };\n        this.onMouseDownOnControl = (e) => {\n            if (this.props.disabled) {\n                return;\n            }\n            e.stopPropagation();\n            e.preventDefault();\n            if (!this.state.menuOpened) {\n                this.setState(prevState => (Object.assign({}, prevState, { menuOpened: true })));\n            }\n            this.focusInput();\n        };\n        // stop propagation to dropdown control, but focus on input\n        this.onMouseDownOnMenu = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.focusInput();\n        };\n        this.onMouseDownOnArrow = (e) => {\n            // will not rendered on disabled\n            // if (this.props.disabled) {\n            //   return\n            // }\n            e.stopPropagation();\n            e.preventDefault();\n            this.setState({\n                menuOpened: !this.state.menuOpened,\n            });\n        };\n        this.onMouseDownOutside = e => {\n            if (!this.wrapper) {\n                return;\n            }\n            if (!this.wrapper.contains(e.target)) {\n                this.closeMenu();\n            }\n        };\n        this.selectOption = (option) => () => {\n            if (this.props.disableOption(option)) {\n                return;\n            }\n            // this.blurInput();\n            this.setState(prevState => (Object.assign({}, prevState, { \n                // menuOpened: false,\n                inputValue: '' })));\n            this.props.onChange([...this.props.value, option]);\n        };\n        this.selectFocusedOption = () => {\n            // this.blurInput();\n            this.setState(prevState => (Object.assign({}, prevState, { focusedOption: null, \n                // menuOpened: false,\n                inputValue: '' })));\n            this.props.onChange([...this.props.value, this.state.focusedOption]);\n        };\n        this.removeValue = (option) => () => {\n            this.props.onChange(this.props.value.filter(o => o !== option));\n        };\n        this.clearValues = (e) => {\n            e.stopPropagation();\n            this.props.onChange([]);\n            this.focusInput();\n            this.setState(prevState => (Object.assign({}, prevState, { inputValue: '' })));\n        };\n        this.focusOption = (option) => () => {\n            if (!option) {\n                return;\n            }\n            if (this.props.disableOption(option)) {\n                return;\n            }\n            this.setState(prevState => (Object.assign({}, prevState, { focusedOption: option })));\n            this.scrollToFocusedOption(option);\n        };\n        /**\n         * Render Functions\n         */\n        this.renderValue = value => {\n            const { valueRenderer, labelKey, disabled } = this.props;\n            console.log(value);\n            return (React.createElement(Value, null,\n                valueRenderer(value, labelKey),\n                React.createElement(If, { condition: !disabled },\n                    React.createElement(\"span\", { className: \"remove-value\", onClick: this.removeValue(value) }, \"\\u00D7\"))));\n        };\n        this.renderOption = (option) => {\n            const { valueKey, labelKey, optionRenderer, disableOption } = this.props;\n            const { focusedOption } = this.state;\n            const disabled = disableOption(option);\n            return (React.createElement(Option, { className: cx('dropdown-option', {\n                    focused: option === focusedOption,\n                    disabled,\n                }), key: option[valueKey], onClick: this.selectOption(option), onMouseOver: this.focusOption(option) }, optionRenderer(option, labelKey)));\n        };\n    }\n    componentDidUpdate(_, prevState) {\n        if (prevState.menuOpened !== this.state.menuOpened) {\n            this.toggleOutsideClickHandler(this.state.menuOpened);\n        }\n    }\n    toggleOutsideClickHandler(menuOpened) {\n        if (menuOpened) {\n            document.addEventListener('mousedown', this.onMouseDownOutside);\n        }\n        else {\n            document.removeEventListener('mousedown', this.onMouseDownOutside);\n        }\n    }\n    focusInput() {\n        this.input.focus();\n    }\n    // not used in this component\n    // private blurInput() {\n    //   this.input.blur();\n    // }\n    closeMenu() {\n        this.setState({\n            menuOpened: false,\n        });\n    }\n    lookupPreviousOption() {\n        const { focusedOption } = this.state;\n        let startIndex = 0;\n        if (focusedOption) {\n            startIndex = this.filteredOptions.findIndex(o => o === focusedOption);\n        }\n        let lookupIndex = mod(this.filteredOptions.length, startIndex - 1);\n        while (true) {\n            let lookupOption = this.filteredOptions[lookupIndex];\n            // if prev option is not disabled, then\n            if (!this.props.disableOption(lookupOption)) {\n                return lookupOption;\n            }\n            // lookup for a loop, but nothing matched.\n            if (lookupIndex === startIndex) {\n                return null;\n            }\n            lookupIndex = mod(this.filteredOptions.length, lookupIndex - 1);\n        }\n    }\n    lookupNextOption() {\n        const { focusedOption } = this.state;\n        let startIndex = Math.max(this.filteredOptions.length - 1, 0);\n        if (focusedOption) {\n            startIndex = this.filteredOptions.findIndex(o => o === focusedOption);\n        }\n        let lookupIndex = mod(this.filteredOptions.length, startIndex + 1);\n        while (true) {\n            let lookupOption = this.filteredOptions[lookupIndex];\n            // if next option is not disabled, then\n            if (!this.props.disableOption(lookupOption)) {\n                return lookupOption;\n            }\n            // lookup for a loop, but nothing matched.\n            if (lookupIndex === startIndex) {\n                return null;\n            }\n            lookupIndex = mod(this.filteredOptions.length, lookupIndex + 1);\n        }\n    }\n    // this code is not testable in jsdom environment\n    scrollToFocusedOption(option) {\n        const index = this.filteredOptions.findIndex(o => o === option);\n        const menuDOM = ReactDOM.findDOMNode(this.menu);\n        if (!menuDOM) {\n            return;\n        }\n        const focusedOptionDOM = menuDOM.children[index];\n        const menuRect = menuDOM.getBoundingClientRect();\n        const focusedOptionRect = focusedOptionDOM.getBoundingClientRect();\n        if (focusedOptionRect.bottom > menuRect.bottom ||\n            focusedOptionRect.top < menuRect.top) {\n            menuDOM.scrollTop =\n                focusedOptionDOM.offsetTop +\n                    focusedOptionDOM.clientHeight -\n                    menuDOM.offsetHeight;\n        }\n    }\n    renderValues() {\n        const { value } = this.props;\n        return React.createElement(Values, null, value.map(this.renderValue));\n    }\n    renderLabel() {\n        const { inputFocused } = this.state;\n        const { value, label } = this.props;\n        return React.createElement(Label, { asPlaceholder: !inputFocused && !value }, label);\n    }\n    renderInput() {\n        const { inputValue } = this.state;\n        return (React.createElement(Input, { innerRef: c => {\n                this.input = c;\n            }, value: inputValue, onChange: this.onInputChange, onFocus: this.onInputFocus, onBlur: this.onInputBlur }));\n    }\n    renderArrow() {\n        return (React.createElement(ToggleArrow, { type: \"button\", opened: this.state.menuOpened, onMouseDown: this.onMouseDownOnArrow, tabIndex: -1 }));\n    }\n    renderClear() {\n        return (React.createElement(ClearButton, { type: \"button\", className: \"dropdown-clear\", onClick: this.clearValues }, \"\\u00D7\"));\n    }\n    renderMenu() {\n        const { options: givenOptions, labelKey, noValidOptionMessage, } = this.props;\n        const { inputValue } = this.state;\n        this.filteredOptions = this.props.filterOptions(givenOptions, this.props.value, inputValue, labelKey);\n        return (React.createElement(Menu, { onMouseDown: this.onMouseDownOnMenu, innerRef: c => {\n                this.menu = c;\n            } },\n            this.filteredOptions.map(this.renderOption),\n            React.createElement(If, { condition: this.filteredOptions.length === 0 },\n                React.createElement(\"span\", { className: \"no-valid-option\" }, noValidOptionMessage))));\n    }\n    render() {\n        const { className, label, value, searchable, clearable, disabled, errorMessage, } = this.props;\n        const { menuOpened, inputFocused } = this.state;\n        return (React.createElement(StyledDropdown, { className: cx('dropdown', className), focused: inputFocused, hasValue: value.length > 0, innerRef: c => (this.wrapper = c) },\n            React.createElement(DropdownControl, { onMouseDown: this.onMouseDownOnControl, onKeyDown: this.onKeyDown },\n                React.createElement(If, { condition: label }, this.renderLabel()),\n                React.createElement(If, { condition: value }, this.renderValues()),\n                React.createElement(If, { condition: searchable && !disabled }, this.renderInput()),\n                React.createElement(If, { condition: value && clearable && !disabled }, this.renderClear()),\n                React.createElement(If, { condition: !disabled }, this.renderArrow())),\n            React.createElement(If, { condition: errorMessage },\n                React.createElement(ErrorMessage, null, errorMessage)),\n            React.createElement(If, { condition: menuOpened }, this.renderMenu())));\n    }\n}\nconst defaultProps = {\n    value: [],\n    onFocus: () => { },\n    onBlur: () => { },\n    valueKey: 'value',\n    labelKey: 'label',\n    valueRenderer: defaultOptionRenderer,\n    optionRenderer: defaultOptionRenderer,\n    filterOptions: defaultFilterOptions,\n    disableOption: option => !option || option.disabled,\n    label: '',\n    disabled: false,\n    clearable: true,\n    searchable: true,\n    autoFocus: false,\n    noValidOptionMessage: '선택 가능한 옵션이 없습니다',\n};\nexport default withDefaultProps(defaultProps)(Dropdown);\n","import styled, { css } from 'styled-components';\nimport AutosizeInput from 'react-input-autosize';\nimport { convert } from 'css-color-function';\nimport { color, border, text, fontSize, background } from '../styles/theme';\nexport const StyledDropdown = styled.div `\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  padding-top: 14px;\n  border-bottom: 1px solid ${border.strong};\n  ${(props) => (props.focused ? onFocused : '')};\n  ${(props) => (props.hasValue ? hasValue : '')};\n`;\nexport const DropdownControl = styled.div `\n  position: relative;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\nconst placeholderStyle = css `\n  left: 5px;\n  bottom: 0;\n  font-size: ${fontSize.default};\n  line-height: 30px;\n  color: ${text.placeholder};\n`;\nexport const Label = styled.span `\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  font-size: 11px;\n  line-height: 14px;\n  color: ${color.main};\n  transition: bottom 0.2s linear, left 0.2s linear, line-height 0.2s linear,\n    color 0.2s, font-size 0.1s;\n  ${(props) => (props.asPlaceholder ? placeholderStyle : '')};\n`;\nexport const Value = styled.div `\n  padding-left: 5px;\n  line-height: 30px;\n  display: inline-block;\n`;\nexport const Input = styled(AutosizeInput) `\n  flex-grow: 1;\n  & input {\n    max-width: 100%;\n    height: 30px;\n    padding-left: 5px;\n    border: 0;\n    vertical-align: top;\n    outline: none;\n    box-sizing: content-box;\n    -webkit-appearance: none;\n    background: none;\n  }\n`;\nconst rotateArrow = css `\n  transform: rotate(180deg) translateY(2px);\n`;\nexport const ToggleArrow = styled.button `\n  padding: 0 5px;\n  background: none;\n  border: 0;\n  cursor: pointer;\n  &::before {\n    content: '';\n    display: inline-block;\n    border-width: 5px 5px 3px 5px;\n    border-style: solid;\n    border-color: ${border.strong} transparent transparent transparent;\n    ${(props) => (props.opened ? rotateArrow : '')};\n  }\n`;\nexport const ClearButton = styled.button `\n  padding: 0 5px;\n  background: none;\n  border: 0;\n  cursor: pointer;\n  &:focus,\n  &:hover {\n    color: ${color.warn};\n  }\n`;\nexport const ErrorMessage = styled.div `\n  position: absolute;\n  left: 0;\n  bottom: -14px;\n  display: inline-block;\n  padding: 1px 2px;\n  margin: 0 3px;\n  font-size: 11px;\n  line-height: normal;\n  color: ${color.warn};\n  background: ${convert(`color(${color.warn} a(0.1))`)};\n  border-radius: 3px;\n`;\nexport const Menu = styled.div `\n  position: absolute;\n  width: 100%;\n  max-height: 200px;\n  border: 1px solid ${border.weak};\n  box-sizing: border-box;\n  background: white;\n  overflow-y: scroll;\n  z-index: 2;\n  transform: translateY(1px);\n  cursor: pointer;\n  & .no-valid-option {\n    display: block;\n    padding: 8px 5px;\n    font-size: ${fontSize.small};\n    color: ${text.placeholder};\n  }\n`;\nexport const Option = styled.div `\n  padding: 8px 5px;\n  &.focused {\n    background: ${background.hover};\n  }\n  &.disabled {\n    color: ${text.placeholder};\n    cursor: default;\n  }\n`;\n/* Depends on Status */\nconst onFocused = css `\n  border-bottom: 1px solid ${color.main};\n  ${ToggleArrow}::before {\n    border-color: ${color.main} transparent transparent transparent;\n  }\n`;\nconst hasValue = onFocused;\n","export const color = {\n    main: 'hsl(210, 60%, 54%)',\n    warn: 'hsl(345, 48%, 54%)'\n};\nexport const background = {\n    white: 'white',\n    hover: 'hsl(210, 70%, 95%)'\n};\nexport const text = {\n    default: 'hsl(0, 0%, 25%)',\n    placeholder: 'hsl(210, 5%, 70%)'\n};\nexport const border = {\n    dark: 'hsl(0, 0%, 35%)',\n    strong: 'hsl(0, 0%, 70%)',\n    weak: 'hsl(0, 0%, 90%)'\n};\nexport const fontSize = {\n    large: '16px',\n    default: '14px',\n    small: '12px'\n};\n","import styled, { injectGlobal } from 'styled-components';\nimport D2CodingWoff2 from '../../assets/fonts/d2coding-ligature.woff2';\n// Original highlight.js style\ninjectGlobal `\n  @font-face {\n    font-family: 'D2Coding';\n    font-weight: 400;\n    src: url('${D2CodingWoff2}') format('woff2');\n  }\n\n  body {\n    font-family: D2Coding;\n  }\n\n  /*\n\n  Atom One Dark by Daniel Gamage\n  Original One Dark Syntax theme from https://github.com/atom/one-dark-syntax\n\n  base:    #282c34\n  mono-1:  #abb2bf\n  mono-2:  #818896\n  mono-3:  #5c6370\n  hue-1:   #56b6c2\n  hue-2:   #61aeee\n  hue-3:   #c678dd\n  hue-4:   #98c379\n  hue-5:   #e06c75\n  hue-5-2: #be5046\n  hue-6:   #d19a66\n  hue-6-2: #e6c07b\n\n  */\n\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 0.5em;\n    color: #abb2bf;\n    background: #282c34;\n    font: 14px 'D2Coding';\n  }\n\n  .hljs-comment,\n  .hljs-quote {\n    color: #5c6370;\n    font-style: italic;\n  }\n\n  .hljs-doctag,\n  .hljs-keyword,\n  .hljs-formula {\n    color: #c678dd;\n  }\n\n  .hljs-section,\n  .hljs-name,\n  .hljs-selector-tag,\n  .hljs-deletion,\n  .hljs-subst {\n    color: #e06c75;\n  }\n\n  .hljs-literal {\n    color: #56b6c2;\n  }\n\n  .hljs-string,\n  .hljs-regexp,\n  .hljs-addition,\n  .hljs-attribute,\n  .hljs-meta-string {\n    color: #98c379;\n  }\n\n  .hljs-built_in,\n  .hljs-class .hljs-title {\n    color: #e6c07b;\n  }\n\n  .hljs-attr,\n  .hljs-variable,\n  .hljs-template-variable,\n  .hljs-type,\n  .hljs-selector-class,\n  .hljs-selector-attr,\n  .hljs-selector-pseudo,\n  .hljs-number {\n    color: #d19a66;\n  }\n\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-link,\n  .hljs-meta,\n  .hljs-selector-id,\n  .hljs-title {\n    color: #61aeee;\n  }\n\n  .hljs-emphasis {\n    font-style: italic;\n  }\n\n  .hljs-strong {\n    font-weight: bold;\n  }\n\n  .hljs-link {\n    text-decoration: underline;\n  }\n`;\nexport const StyledDocumentation = styled.div `\n  padding: 20px;\n  h1 {\n    margin-bottom: 10px;\n    font-size: 25px;\n    font-weight: bold;\n  }\n  h2 {\n    font-size: 18px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid #ddd;\n    margin-bottom: 20px;\n  }\n  .preview {\n    position: relative;\n    padding: 20px;\n    margin: 20px 0;\n    background: #f8f9fa;\n    &::before {\n      content: 'Example';\n      position: absolute;\n      top: -5px;\n      left: 0;\n    }\n  }\n  h3 {\n    font-size: 15px;\n    margin-left: 10px;\n    margin-bottom: 10px;\n  }\n  pre {\n    margin: 10px;\n    margin-bottom: 20px;\n    & code {\n      padding: 20px;\n    }\n  }\n`;\n","module.exports = __webpack_public_path__ + \"e34f30cb2ca80ca96bb055a32ac5ab44.woff2\";"],"mappings":"AAOA;;;ACDA;;;;;;;;;;;;;ACAA;;;;;ACGA;AACA;AACA;AAEA;;;;;AAMA;;;AAGA;;AAEA;AAEA;;;;;;AAMA;;;AAGA;AAEA;;;;AAKA;;;;;;;;;;;;;AAcA;;AAGA;;;;;;;;;;AAUA;AACA;;AAGA;;;;;;;AAOA;;AAGA;;;;;;;;;AASA;AACA;;AAGA;;;;AAIA;;;;;;;;;;AAUA;AACA;;AAGA;;;AC5GA;;;ADkHA;;;AAKA;AACA;AACA;AACA;;AAGA;;;;AE5HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA","sourceRoot":""}